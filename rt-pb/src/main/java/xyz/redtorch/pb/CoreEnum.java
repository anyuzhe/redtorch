// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xyz/redtorch/pb/core_enum.proto

package xyz.redtorch.pb;

public final class CoreEnum {
  private CoreEnum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * 货币
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.CurrencyEnum}
   */
  public enum CurrencyEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_CURRENCY = 0;</code>
     */
    UNKNOWN_CURRENCY(0),
    /**
     * <pre>
     * 美元
     * </pre>
     *
     * <code>USD = 1;</code>
     */
    USD(1),
    /**
     * <pre>
     * 人民币
     * </pre>
     *
     * <code>CNY = 2;</code>
     */
    CNY(2),
    /**
     * <pre>
     * 离岸人民币
     * </pre>
     *
     * <code>CNH = 3;</code>
     */
    CNH(3),
    /**
     * <pre>
     * 港币
     * </pre>
     *
     * <code>HKD = 4;</code>
     */
    HKD(4),
    /**
     * <pre>
     * 日元
     * </pre>
     *
     * <code>JPY = 5;</code>
     */
    JPY(5),
    /**
     * <pre>
     * 欧元
     * </pre>
     *
     * <code>EUR = 6;</code>
     */
    EUR(6),
    /**
     * <pre>
     * 英镑
     * </pre>
     *
     * <code>GBP = 7;</code>
     */
    GBP(7),
    /**
     * <pre>
     * 德国马克
     * </pre>
     *
     * <code>DEM = 8;</code>
     */
    DEM(8),
    /**
     * <pre>
     * 瑞士法郎
     * </pre>
     *
     * <code>CHF = 9;</code>
     */
    CHF(9),
    /**
     * <pre>
     * 法国法郎
     * </pre>
     *
     * <code>FRF = 10;</code>
     */
    FRF(10),
    /**
     * <pre>
     * 加拿大元
     * </pre>
     *
     * <code>CAD = 11;</code>
     */
    CAD(11),
    /**
     * <pre>
     * 澳大利亚元
     * </pre>
     *
     * <code>AUD = 12;</code>
     */
    AUD(12),
    /**
     * <pre>
     * 奥地利先令
     * </pre>
     *
     * <code>ATS = 13;</code>
     */
    ATS(13),
    /**
     * <pre>
     * 芬兰马克
     * </pre>
     *
     * <code>FIM = 14;</code>
     */
    FIM(14),
    /**
     * <pre>
     * 比利时法郎
     * </pre>
     *
     * <code>BEF = 15;</code>
     */
    BEF(15),
    /**
     * <pre>
     * 泰铢
     * </pre>
     *
     * <code>THB = 16;</code>
     */
    THB(16),
    /**
     * <pre>
     * 爱尔兰镑
     * </pre>
     *
     * <code>IEP = 17;</code>
     */
    IEP(17),
    /**
     * <pre>
     * 意大利里拉
     * </pre>
     *
     * <code>ITL = 18;</code>
     */
    ITL(18),
    /**
     * <pre>
     * 卢森堡法郎
     * </pre>
     *
     * <code>LUF = 19;</code>
     */
    LUF(19),
    /**
     * <pre>
     * 荷兰盾
     * </pre>
     *
     * <code>NLG = 20;</code>
     */
    NLG(20),
    /**
     * <pre>
     * 葡萄牙埃斯库多
     * </pre>
     *
     * <code>PTE = 21;</code>
     */
    PTE(21),
    /**
     * <pre>
     * 西班牙比塞塔
     * </pre>
     *
     * <code>ESP = 22;</code>
     */
    ESP(22),
    /**
     * <pre>
     * 印尼盾
     * </pre>
     *
     * <code>IDR = 23;</code>
     */
    IDR(23),
    /**
     * <pre>
     * 马来西亚林吉特
     * </pre>
     *
     * <code>MYR = 24;</code>
     */
    MYR(24),
    /**
     * <pre>
     * 新西兰元
     * </pre>
     *
     * <code>NZD = 25;</code>
     */
    NZD(25),
    /**
     * <pre>
     * 菲律宾比索
     * </pre>
     *
     * <code>PHP = 26;</code>
     */
    PHP(26),
    /**
     * <pre>
     * 俄罗斯卢布
     * </pre>
     *
     * <code>SUR = 27;</code>
     */
    SUR(27),
    /**
     * <pre>
     * 新加坡元
     * </pre>
     *
     * <code>SGD = 28;</code>
     */
    SGD(28),
    /**
     * <pre>
     * 韩国元
     * </pre>
     *
     * <code>KRW = 29;</code>
     */
    KRW(29),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_CURRENCY = 0;</code>
     */
    public static final int UNKNOWN_CURRENCY_VALUE = 0;
    /**
     * <pre>
     * 美元
     * </pre>
     *
     * <code>USD = 1;</code>
     */
    public static final int USD_VALUE = 1;
    /**
     * <pre>
     * 人民币
     * </pre>
     *
     * <code>CNY = 2;</code>
     */
    public static final int CNY_VALUE = 2;
    /**
     * <pre>
     * 离岸人民币
     * </pre>
     *
     * <code>CNH = 3;</code>
     */
    public static final int CNH_VALUE = 3;
    /**
     * <pre>
     * 港币
     * </pre>
     *
     * <code>HKD = 4;</code>
     */
    public static final int HKD_VALUE = 4;
    /**
     * <pre>
     * 日元
     * </pre>
     *
     * <code>JPY = 5;</code>
     */
    public static final int JPY_VALUE = 5;
    /**
     * <pre>
     * 欧元
     * </pre>
     *
     * <code>EUR = 6;</code>
     */
    public static final int EUR_VALUE = 6;
    /**
     * <pre>
     * 英镑
     * </pre>
     *
     * <code>GBP = 7;</code>
     */
    public static final int GBP_VALUE = 7;
    /**
     * <pre>
     * 德国马克
     * </pre>
     *
     * <code>DEM = 8;</code>
     */
    public static final int DEM_VALUE = 8;
    /**
     * <pre>
     * 瑞士法郎
     * </pre>
     *
     * <code>CHF = 9;</code>
     */
    public static final int CHF_VALUE = 9;
    /**
     * <pre>
     * 法国法郎
     * </pre>
     *
     * <code>FRF = 10;</code>
     */
    public static final int FRF_VALUE = 10;
    /**
     * <pre>
     * 加拿大元
     * </pre>
     *
     * <code>CAD = 11;</code>
     */
    public static final int CAD_VALUE = 11;
    /**
     * <pre>
     * 澳大利亚元
     * </pre>
     *
     * <code>AUD = 12;</code>
     */
    public static final int AUD_VALUE = 12;
    /**
     * <pre>
     * 奥地利先令
     * </pre>
     *
     * <code>ATS = 13;</code>
     */
    public static final int ATS_VALUE = 13;
    /**
     * <pre>
     * 芬兰马克
     * </pre>
     *
     * <code>FIM = 14;</code>
     */
    public static final int FIM_VALUE = 14;
    /**
     * <pre>
     * 比利时法郎
     * </pre>
     *
     * <code>BEF = 15;</code>
     */
    public static final int BEF_VALUE = 15;
    /**
     * <pre>
     * 泰铢
     * </pre>
     *
     * <code>THB = 16;</code>
     */
    public static final int THB_VALUE = 16;
    /**
     * <pre>
     * 爱尔兰镑
     * </pre>
     *
     * <code>IEP = 17;</code>
     */
    public static final int IEP_VALUE = 17;
    /**
     * <pre>
     * 意大利里拉
     * </pre>
     *
     * <code>ITL = 18;</code>
     */
    public static final int ITL_VALUE = 18;
    /**
     * <pre>
     * 卢森堡法郎
     * </pre>
     *
     * <code>LUF = 19;</code>
     */
    public static final int LUF_VALUE = 19;
    /**
     * <pre>
     * 荷兰盾
     * </pre>
     *
     * <code>NLG = 20;</code>
     */
    public static final int NLG_VALUE = 20;
    /**
     * <pre>
     * 葡萄牙埃斯库多
     * </pre>
     *
     * <code>PTE = 21;</code>
     */
    public static final int PTE_VALUE = 21;
    /**
     * <pre>
     * 西班牙比塞塔
     * </pre>
     *
     * <code>ESP = 22;</code>
     */
    public static final int ESP_VALUE = 22;
    /**
     * <pre>
     * 印尼盾
     * </pre>
     *
     * <code>IDR = 23;</code>
     */
    public static final int IDR_VALUE = 23;
    /**
     * <pre>
     * 马来西亚林吉特
     * </pre>
     *
     * <code>MYR = 24;</code>
     */
    public static final int MYR_VALUE = 24;
    /**
     * <pre>
     * 新西兰元
     * </pre>
     *
     * <code>NZD = 25;</code>
     */
    public static final int NZD_VALUE = 25;
    /**
     * <pre>
     * 菲律宾比索
     * </pre>
     *
     * <code>PHP = 26;</code>
     */
    public static final int PHP_VALUE = 26;
    /**
     * <pre>
     * 俄罗斯卢布
     * </pre>
     *
     * <code>SUR = 27;</code>
     */
    public static final int SUR_VALUE = 27;
    /**
     * <pre>
     * 新加坡元
     * </pre>
     *
     * <code>SGD = 28;</code>
     */
    public static final int SGD_VALUE = 28;
    /**
     * <pre>
     * 韩国元
     * </pre>
     *
     * <code>KRW = 29;</code>
     */
    public static final int KRW_VALUE = 29;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CurrencyEnum valueOf(int value) {
      return forNumber(value);
    }

    public static CurrencyEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_CURRENCY;
        case 1: return USD;
        case 2: return CNY;
        case 3: return CNH;
        case 4: return HKD;
        case 5: return JPY;
        case 6: return EUR;
        case 7: return GBP;
        case 8: return DEM;
        case 9: return CHF;
        case 10: return FRF;
        case 11: return CAD;
        case 12: return AUD;
        case 13: return ATS;
        case 14: return FIM;
        case 15: return BEF;
        case 16: return THB;
        case 17: return IEP;
        case 18: return ITL;
        case 19: return LUF;
        case 20: return NLG;
        case 21: return PTE;
        case 22: return ESP;
        case 23: return IDR;
        case 24: return MYR;
        case 25: return NZD;
        case 26: return PHP;
        case 27: return SUR;
        case 28: return SGD;
        case 29: return KRW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CurrencyEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CurrencyEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CurrencyEnum>() {
            public CurrencyEnum findValueByNumber(int number) {
              return CurrencyEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final CurrencyEnum[] VALUES = values();

    public static CurrencyEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CurrencyEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.CurrencyEnum)
  }

  /**
   * <pre>
   * 交易所
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ExchangeEnum}
   */
  public enum ExchangeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_EXCHANGE = 0;</code>
     */
    UNKNOWN_EXCHANGE(0),
    /**
     * <pre>
     * 上海证券交易所
     * </pre>
     *
     * <code>SSE = 1;</code>
     */
    SSE(1),
    /**
     * <pre>
     * 深圳证券交易所
     * </pre>
     *
     * <code>SZSE = 2;</code>
     */
    SZSE(2),
    /**
     * <pre>
     * 中国金融期货交易所
     * </pre>
     *
     * <code>CFFEX = 3;</code>
     */
    CFFEX(3),
    /**
     * <pre>
     * 上海期货交易所
     * </pre>
     *
     * <code>SHFE = 4;</code>
     */
    SHFE(4),
    /**
     * <pre>
     * 郑州商品交易所
     * </pre>
     *
     * <code>CZCE = 5;</code>
     */
    CZCE(5),
    /**
     * <pre>
     * 大连商品交易所
     * </pre>
     *
     * <code>DCE = 6;</code>
     */
    DCE(6),
    /**
     * <pre>
     * 上海黄金交易所
     * </pre>
     *
     * <code>SGE = 7;</code>
     */
    SGE(7),
    /**
     * <pre>
     * 上海国际能源交易中心
     * </pre>
     *
     * <code>INE = 8;</code>
     */
    INE(8),
    /**
     * <pre>
     * 香港联合交易所
     * </pre>
     *
     * <code>SEHK = 9;</code>
     */
    SEHK(9),
    /**
     * <pre>
     * 香港期货交易所
     * </pre>
     *
     * <code>HKFE = 10;</code>
     */
    HKFE(10),
    /**
     * <pre>
     * 新加坡证券交易所
     * </pre>
     *
     * <code>SGX = 11;</code>
     */
    SGX(11),
    /**
     * <pre>
     *纽约期货交易所
     * </pre>
     *
     * <code>NYBOT = 12;</code>
     */
    NYBOT(12),
    /**
     * <pre>
     * 纽约商业交易所
     * </pre>
     *
     * <code>NYMEX = 13;</code>
     */
    NYMEX(13),
    /**
     * <pre>
     * 纽约金属交易所
     * </pre>
     *
     * <code>COMEX = 14;</code>
     */
    COMEX(14),
    /**
     * <pre>
     * 芝加哥商业交易所
     * </pre>
     *
     * <code>CME = 15;</code>
     */
    CME(15),
    /**
     * <pre>
     * 芝加哥期权交易所期货交易分所
     * </pre>
     *
     * <code>CFE = 16;</code>
     */
    CFE(16),
    /**
     * <pre>
     * CME Globex
     * </pre>
     *
     * <code>GLOBEX = 17;</code>
     */
    GLOBEX(17),
    /**
     * <pre>
     * 美国洲际交易所
     * </pre>
     *
     * <code>ICE = 18;</code>
     */
    ICE(18),
    /**
     * <pre>
     * 伦敦国际石油交易所
     * </pre>
     *
     * <code>IPE = 19;</code>
     */
    IPE(19),
    /**
     * <pre>
     * 伦敦金属交易所
     * </pre>
     *
     * <code>LME = 20;</code>
     */
    LME(20),
    /**
     * <pre>
     * IDEALPRO（IB外汇）
     * </pre>
     *
     * <code>IDEALPRO = 21;</code>
     */
    IDEALPRO(21),
    /**
     * <pre>
     * OANDA外汇做市商
     * </pre>
     *
     * <code>OANDA = 22;</code>
     */
    OANDA(22),
    /**
     * <pre>
     * FXCM外汇做市商
     * </pre>
     *
     * <code>FXCM = 23;</code>
     */
    FXCM(23),
    /**
     * <pre>
     * IB智能路由
     * </pre>
     *
     * <code>SMART = 24;</code>
     */
    SMART(24),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_EXCHANGE = 0;</code>
     */
    public static final int UNKNOWN_EXCHANGE_VALUE = 0;
    /**
     * <pre>
     * 上海证券交易所
     * </pre>
     *
     * <code>SSE = 1;</code>
     */
    public static final int SSE_VALUE = 1;
    /**
     * <pre>
     * 深圳证券交易所
     * </pre>
     *
     * <code>SZSE = 2;</code>
     */
    public static final int SZSE_VALUE = 2;
    /**
     * <pre>
     * 中国金融期货交易所
     * </pre>
     *
     * <code>CFFEX = 3;</code>
     */
    public static final int CFFEX_VALUE = 3;
    /**
     * <pre>
     * 上海期货交易所
     * </pre>
     *
     * <code>SHFE = 4;</code>
     */
    public static final int SHFE_VALUE = 4;
    /**
     * <pre>
     * 郑州商品交易所
     * </pre>
     *
     * <code>CZCE = 5;</code>
     */
    public static final int CZCE_VALUE = 5;
    /**
     * <pre>
     * 大连商品交易所
     * </pre>
     *
     * <code>DCE = 6;</code>
     */
    public static final int DCE_VALUE = 6;
    /**
     * <pre>
     * 上海黄金交易所
     * </pre>
     *
     * <code>SGE = 7;</code>
     */
    public static final int SGE_VALUE = 7;
    /**
     * <pre>
     * 上海国际能源交易中心
     * </pre>
     *
     * <code>INE = 8;</code>
     */
    public static final int INE_VALUE = 8;
    /**
     * <pre>
     * 香港联合交易所
     * </pre>
     *
     * <code>SEHK = 9;</code>
     */
    public static final int SEHK_VALUE = 9;
    /**
     * <pre>
     * 香港期货交易所
     * </pre>
     *
     * <code>HKFE = 10;</code>
     */
    public static final int HKFE_VALUE = 10;
    /**
     * <pre>
     * 新加坡证券交易所
     * </pre>
     *
     * <code>SGX = 11;</code>
     */
    public static final int SGX_VALUE = 11;
    /**
     * <pre>
     *纽约期货交易所
     * </pre>
     *
     * <code>NYBOT = 12;</code>
     */
    public static final int NYBOT_VALUE = 12;
    /**
     * <pre>
     * 纽约商业交易所
     * </pre>
     *
     * <code>NYMEX = 13;</code>
     */
    public static final int NYMEX_VALUE = 13;
    /**
     * <pre>
     * 纽约金属交易所
     * </pre>
     *
     * <code>COMEX = 14;</code>
     */
    public static final int COMEX_VALUE = 14;
    /**
     * <pre>
     * 芝加哥商业交易所
     * </pre>
     *
     * <code>CME = 15;</code>
     */
    public static final int CME_VALUE = 15;
    /**
     * <pre>
     * 芝加哥期权交易所期货交易分所
     * </pre>
     *
     * <code>CFE = 16;</code>
     */
    public static final int CFE_VALUE = 16;
    /**
     * <pre>
     * CME Globex
     * </pre>
     *
     * <code>GLOBEX = 17;</code>
     */
    public static final int GLOBEX_VALUE = 17;
    /**
     * <pre>
     * 美国洲际交易所
     * </pre>
     *
     * <code>ICE = 18;</code>
     */
    public static final int ICE_VALUE = 18;
    /**
     * <pre>
     * 伦敦国际石油交易所
     * </pre>
     *
     * <code>IPE = 19;</code>
     */
    public static final int IPE_VALUE = 19;
    /**
     * <pre>
     * 伦敦金属交易所
     * </pre>
     *
     * <code>LME = 20;</code>
     */
    public static final int LME_VALUE = 20;
    /**
     * <pre>
     * IDEALPRO（IB外汇）
     * </pre>
     *
     * <code>IDEALPRO = 21;</code>
     */
    public static final int IDEALPRO_VALUE = 21;
    /**
     * <pre>
     * OANDA外汇做市商
     * </pre>
     *
     * <code>OANDA = 22;</code>
     */
    public static final int OANDA_VALUE = 22;
    /**
     * <pre>
     * FXCM外汇做市商
     * </pre>
     *
     * <code>FXCM = 23;</code>
     */
    public static final int FXCM_VALUE = 23;
    /**
     * <pre>
     * IB智能路由
     * </pre>
     *
     * <code>SMART = 24;</code>
     */
    public static final int SMART_VALUE = 24;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExchangeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static ExchangeEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_EXCHANGE;
        case 1: return SSE;
        case 2: return SZSE;
        case 3: return CFFEX;
        case 4: return SHFE;
        case 5: return CZCE;
        case 6: return DCE;
        case 7: return SGE;
        case 8: return INE;
        case 9: return SEHK;
        case 10: return HKFE;
        case 11: return SGX;
        case 12: return NYBOT;
        case 13: return NYMEX;
        case 14: return COMEX;
        case 15: return CME;
        case 16: return CFE;
        case 17: return GLOBEX;
        case 18: return ICE;
        case 19: return IPE;
        case 20: return LME;
        case 21: return IDEALPRO;
        case 22: return OANDA;
        case 23: return FXCM;
        case 24: return SMART;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExchangeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExchangeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExchangeEnum>() {
            public ExchangeEnum findValueByNumber(int number) {
              return ExchangeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(1);
    }

    private static final ExchangeEnum[] VALUES = values();

    public static ExchangeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExchangeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ExchangeEnum)
  }

  /**
   * <pre>
   * 产品类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ProductTypeEnum}
   */
  public enum ProductTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_PRODUCT_TYPE = 0;</code>
     */
    UNKNOWN_PRODUCT_TYPE(0),
    /**
     * <pre>
     * 股票
     * </pre>
     *
     * <code>EQUITY = 1;</code>
     */
    EQUITY(1),
    /**
     * <pre>
     * 期货
     * </pre>
     *
     * <code>FUTURES = 2;</code>
     */
    FUTURES(2),
    /**
     * <pre>
     * 期权
     * </pre>
     *
     * <code>OPTION = 3;</code>
     */
    OPTION(3),
    /**
     * <pre>
     * 指数
     * </pre>
     *
     * <code>INDEX = 4;</code>
     */
    INDEX(4),
    /**
     * <pre>
     * 组合
     * </pre>
     *
     * <code>COMBINATION = 5;</code>
     */
    COMBINATION(5),
    /**
     * <pre>
     * 债券
     * </pre>
     *
     * <code>BOND = 6;</code>
     */
    BOND(6),
    /**
     * <pre>
     * 外汇
     * </pre>
     *
     * <code>FOREX = 7;</code>
     */
    FOREX(7),
    /**
     * <pre>
     * 现货
     * </pre>
     *
     * <code>SPOT = 8;</code>
     */
    SPOT(8),
    /**
     * <pre>
     * 延期
     * </pre>
     *
     * <code>DEFER = 9;</code>
     */
    DEFER(9),
    /**
     * <pre>
     * ETF
     * </pre>
     *
     * <code>ETF = 10;</code>
     */
    ETF(10),
    /**
     * <pre>
     * 权证
     * </pre>
     *
     * <code>WARRANT = 11;</code>
     */
    WARRANT(11),
    /**
     * <pre>
     * 价差
     * </pre>
     *
     * <code>SPREAD = 12;</code>
     */
    SPREAD(12),
    /**
     * <pre>
     * 基金
     * </pre>
     *
     * <code>FUND = 13;</code>
     */
    FUND(13),
    /**
     * <pre>
     * 期转现
     * </pre>
     *
     * <code>EFP = 14;</code>
     */
    EFP(14),
    /**
     * <pre>
     * 现货期权
     * </pre>
     *
     * <code>SPOT_OPTION = 15;</code>
     */
    SPOT_OPTION(15),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_PRODUCT_TYPE = 0;</code>
     */
    public static final int UNKNOWN_PRODUCT_TYPE_VALUE = 0;
    /**
     * <pre>
     * 股票
     * </pre>
     *
     * <code>EQUITY = 1;</code>
     */
    public static final int EQUITY_VALUE = 1;
    /**
     * <pre>
     * 期货
     * </pre>
     *
     * <code>FUTURES = 2;</code>
     */
    public static final int FUTURES_VALUE = 2;
    /**
     * <pre>
     * 期权
     * </pre>
     *
     * <code>OPTION = 3;</code>
     */
    public static final int OPTION_VALUE = 3;
    /**
     * <pre>
     * 指数
     * </pre>
     *
     * <code>INDEX = 4;</code>
     */
    public static final int INDEX_VALUE = 4;
    /**
     * <pre>
     * 组合
     * </pre>
     *
     * <code>COMBINATION = 5;</code>
     */
    public static final int COMBINATION_VALUE = 5;
    /**
     * <pre>
     * 债券
     * </pre>
     *
     * <code>BOND = 6;</code>
     */
    public static final int BOND_VALUE = 6;
    /**
     * <pre>
     * 外汇
     * </pre>
     *
     * <code>FOREX = 7;</code>
     */
    public static final int FOREX_VALUE = 7;
    /**
     * <pre>
     * 现货
     * </pre>
     *
     * <code>SPOT = 8;</code>
     */
    public static final int SPOT_VALUE = 8;
    /**
     * <pre>
     * 延期
     * </pre>
     *
     * <code>DEFER = 9;</code>
     */
    public static final int DEFER_VALUE = 9;
    /**
     * <pre>
     * ETF
     * </pre>
     *
     * <code>ETF = 10;</code>
     */
    public static final int ETF_VALUE = 10;
    /**
     * <pre>
     * 权证
     * </pre>
     *
     * <code>WARRANT = 11;</code>
     */
    public static final int WARRANT_VALUE = 11;
    /**
     * <pre>
     * 价差
     * </pre>
     *
     * <code>SPREAD = 12;</code>
     */
    public static final int SPREAD_VALUE = 12;
    /**
     * <pre>
     * 基金
     * </pre>
     *
     * <code>FUND = 13;</code>
     */
    public static final int FUND_VALUE = 13;
    /**
     * <pre>
     * 期转现
     * </pre>
     *
     * <code>EFP = 14;</code>
     */
    public static final int EFP_VALUE = 14;
    /**
     * <pre>
     * 现货期权
     * </pre>
     *
     * <code>SPOT_OPTION = 15;</code>
     */
    public static final int SPOT_OPTION_VALUE = 15;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProductTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static ProductTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_PRODUCT_TYPE;
        case 1: return EQUITY;
        case 2: return FUTURES;
        case 3: return OPTION;
        case 4: return INDEX;
        case 5: return COMBINATION;
        case 6: return BOND;
        case 7: return FOREX;
        case 8: return SPOT;
        case 9: return DEFER;
        case 10: return ETF;
        case 11: return WARRANT;
        case 12: return SPREAD;
        case 13: return FUND;
        case 14: return EFP;
        case 15: return SPOT_OPTION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProductTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ProductTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProductTypeEnum>() {
            public ProductTypeEnum findValueByNumber(int number) {
              return ProductTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(2);
    }

    private static final ProductTypeEnum[] VALUES = values();

    public static ProductTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ProductTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ProductTypeEnum)
  }

  /**
   * <pre>
   * 期权类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OptionTypeEnum}
   */
  public enum OptionTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_OPTION_TYPE = 0;</code>
     */
    UNKNOWN_OPTION_TYPE(0),
    /**
     * <pre>
     * 看涨期权
     * </pre>
     *
     * <code>CALL = 1;</code>
     */
    CALL(1),
    /**
     * <pre>
     * 看跌期权
     * </pre>
     *
     * <code>PUT = 2;</code>
     */
    PUT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_OPTION_TYPE = 0;</code>
     */
    public static final int UNKNOWN_OPTION_TYPE_VALUE = 0;
    /**
     * <pre>
     * 看涨期权
     * </pre>
     *
     * <code>CALL = 1;</code>
     */
    public static final int CALL_VALUE = 1;
    /**
     * <pre>
     * 看跌期权
     * </pre>
     *
     * <code>PUT = 2;</code>
     */
    public static final int PUT_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OptionTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static OptionTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_OPTION_TYPE;
        case 1: return CALL;
        case 2: return PUT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OptionTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OptionTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OptionTypeEnum>() {
            public OptionTypeEnum findValueByNumber(int number) {
              return OptionTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(3);
    }

    private static final OptionTypeEnum[] VALUES = values();

    public static OptionTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OptionTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OptionTypeEnum)
  }

  /**
   * <pre>
   * 方向
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.DirectionEnum}
   */
  public enum DirectionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_DIRECTION = 0;</code>
     */
    UNKNOWN_DIRECTION(0),
    /**
     * <pre>
     * 多
     * </pre>
     *
     * <code>LONG = 1;</code>
     */
    LONG(1),
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>SHORT = 2;</code>
     */
    SHORT(2),
    /**
     * <pre>
     * 净
     * </pre>
     *
     * <code>NET = 3;</code>
     */
    NET(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_DIRECTION = 0;</code>
     */
    public static final int UNKNOWN_DIRECTION_VALUE = 0;
    /**
     * <pre>
     * 多
     * </pre>
     *
     * <code>LONG = 1;</code>
     */
    public static final int LONG_VALUE = 1;
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>SHORT = 2;</code>
     */
    public static final int SHORT_VALUE = 2;
    /**
     * <pre>
     * 净
     * </pre>
     *
     * <code>NET = 3;</code>
     */
    public static final int NET_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DirectionEnum valueOf(int value) {
      return forNumber(value);
    }

    public static DirectionEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_DIRECTION;
        case 1: return LONG;
        case 2: return SHORT;
        case 3: return NET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DirectionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DirectionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DirectionEnum>() {
            public DirectionEnum findValueByNumber(int number) {
              return DirectionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(4);
    }

    private static final DirectionEnum[] VALUES = values();

    public static DirectionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DirectionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.DirectionEnum)
  }

  /**
   * <pre>
   * 开平
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OffsetEnum}
   */
  public enum OffsetEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_OFFSET = 0;</code>
     */
    UNKNOWN_OFFSET(0),
    /**
     * <pre>
     * 无
     * </pre>
     *
     * <code>OFFSET_NONE = 1;</code>
     */
    OFFSET_NONE(1),
    /**
     * <pre>
     * 开
     * </pre>
     *
     * <code>OPEN = 2;</code>
     */
    OPEN(2),
    /**
     * <pre>
     * 平
     * </pre>
     *
     * <code>CLOSE = 3;</code>
     */
    CLOSE(3),
    /**
     * <pre>
     * 平今
     * </pre>
     *
     * <code>CLOSE_TODAY = 4;</code>
     */
    CLOSE_TODAY(4),
    /**
     * <pre>
     * 平昨
     * </pre>
     *
     * <code>CLOSE_YESTERDAY = 5;</code>
     */
    CLOSE_YESTERDAY(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_OFFSET = 0;</code>
     */
    public static final int UNKNOWN_OFFSET_VALUE = 0;
    /**
     * <pre>
     * 无
     * </pre>
     *
     * <code>OFFSET_NONE = 1;</code>
     */
    public static final int OFFSET_NONE_VALUE = 1;
    /**
     * <pre>
     * 开
     * </pre>
     *
     * <code>OPEN = 2;</code>
     */
    public static final int OPEN_VALUE = 2;
    /**
     * <pre>
     * 平
     * </pre>
     *
     * <code>CLOSE = 3;</code>
     */
    public static final int CLOSE_VALUE = 3;
    /**
     * <pre>
     * 平今
     * </pre>
     *
     * <code>CLOSE_TODAY = 4;</code>
     */
    public static final int CLOSE_TODAY_VALUE = 4;
    /**
     * <pre>
     * 平昨
     * </pre>
     *
     * <code>CLOSE_YESTERDAY = 5;</code>
     */
    public static final int CLOSE_YESTERDAY_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OffsetEnum valueOf(int value) {
      return forNumber(value);
    }

    public static OffsetEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_OFFSET;
        case 1: return OFFSET_NONE;
        case 2: return OPEN;
        case 3: return CLOSE;
        case 4: return CLOSE_TODAY;
        case 5: return CLOSE_YESTERDAY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OffsetEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OffsetEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OffsetEnum>() {
            public OffsetEnum findValueByNumber(int number) {
              return OffsetEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(5);
    }

    private static final OffsetEnum[] VALUES = values();

    public static OffsetEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OffsetEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OffsetEnum)
  }

  /**
   * <pre>
   * 委托类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderTypeEnum}
   */
  public enum OrderTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_ORDER_TYPE = 0;</code>
     */
    UNKNOWN_ORDER_TYPE(0),
    /**
     * <code>SELL_ORDER = 1;</code>
     */
    SELL_ORDER(1),
    /**
     * <code>BUY_ORDER = 2;</code>
     */
    BUY_ORDER(2),
    /**
     * <code>SHORT_ORDER = 3;</code>
     */
    SHORT_ORDER(3),
    /**
     * <code>COVER_ORDER = 4;</code>
     */
    COVER_ORDER(4),
    /**
     * <code>SELL_TD_ORDER = 5;</code>
     */
    SELL_TD_ORDER(5),
    /**
     * <code>SELL_YD_ORDER = 6;</code>
     */
    SELL_YD_ORDER(6),
    /**
     * <code>COVER_TD_ORDER = 7;</code>
     */
    COVER_TD_ORDER(7),
    /**
     * <code>COVER_YD_ORDER = 8;</code>
     */
    COVER_YD_ORDER(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNKNOWN_ORDER_TYPE = 0;</code>
     */
    public static final int UNKNOWN_ORDER_TYPE_VALUE = 0;
    /**
     * <code>SELL_ORDER = 1;</code>
     */
    public static final int SELL_ORDER_VALUE = 1;
    /**
     * <code>BUY_ORDER = 2;</code>
     */
    public static final int BUY_ORDER_VALUE = 2;
    /**
     * <code>SHORT_ORDER = 3;</code>
     */
    public static final int SHORT_ORDER_VALUE = 3;
    /**
     * <code>COVER_ORDER = 4;</code>
     */
    public static final int COVER_ORDER_VALUE = 4;
    /**
     * <code>SELL_TD_ORDER = 5;</code>
     */
    public static final int SELL_TD_ORDER_VALUE = 5;
    /**
     * <code>SELL_YD_ORDER = 6;</code>
     */
    public static final int SELL_YD_ORDER_VALUE = 6;
    /**
     * <code>COVER_TD_ORDER = 7;</code>
     */
    public static final int COVER_TD_ORDER_VALUE = 7;
    /**
     * <code>COVER_YD_ORDER = 8;</code>
     */
    public static final int COVER_YD_ORDER_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static OrderTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_ORDER_TYPE;
        case 1: return SELL_ORDER;
        case 2: return BUY_ORDER;
        case 3: return SHORT_ORDER;
        case 4: return COVER_ORDER;
        case 5: return SELL_TD_ORDER;
        case 6: return SELL_YD_ORDER;
        case 7: return COVER_TD_ORDER;
        case 8: return COVER_YD_ORDER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>() {
            public OrderTypeEnum findValueByNumber(int number) {
              return OrderTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(6);
    }

    private static final OrderTypeEnum[] VALUES = values();

    public static OrderTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderTypeEnum)
  }

  /**
   * <pre>
   * 策略引擎类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.StrategyEngineTypeEnum}
   */
  public enum StrategyEngineTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TREADING = 0;</code>
     */
    TREADING(0),
    /**
     * <code>BACKTESTING = 1;</code>
     */
    BACKTESTING(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TREADING = 0;</code>
     */
    public static final int TREADING_VALUE = 0;
    /**
     * <code>BACKTESTING = 1;</code>
     */
    public static final int BACKTESTING_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StrategyEngineTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static StrategyEngineTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return TREADING;
        case 1: return BACKTESTING;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StrategyEngineTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StrategyEngineTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StrategyEngineTypeEnum>() {
            public StrategyEngineTypeEnum findValueByNumber(int number) {
              return StrategyEngineTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(7);
    }

    private static final StrategyEngineTypeEnum[] VALUES = values();

    public static StrategyEngineTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StrategyEngineTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.StrategyEngineTypeEnum)
  }

  /**
   * <pre>
   * 价格类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.PriceTypeEnum}
   */
  public enum PriceTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_PRICE_TYPE = 0;</code>
     */
    UNKNOWN_PRICE_TYPE(0),
    /**
     * <pre>
     * 限价
     * </pre>
     *
     * <code>LIMIT = 1;</code>
     */
    LIMIT(1),
    /**
     * <pre>
     * 市价
     * </pre>
     *
     * <code>MARKET = 2;</code>
     */
    MARKET(2),
    /**
     * <pre>
     * FAK
     * </pre>
     *
     * <code>FAK = 3;</code>
     */
    FAK(3),
    /**
     * <pre>
     * FOK
     * </pre>
     *
     * <code>FOK = 4;</code>
     */
    FOK(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_PRICE_TYPE = 0;</code>
     */
    public static final int UNKNOWN_PRICE_TYPE_VALUE = 0;
    /**
     * <pre>
     * 限价
     * </pre>
     *
     * <code>LIMIT = 1;</code>
     */
    public static final int LIMIT_VALUE = 1;
    /**
     * <pre>
     * 市价
     * </pre>
     *
     * <code>MARKET = 2;</code>
     */
    public static final int MARKET_VALUE = 2;
    /**
     * <pre>
     * FAK
     * </pre>
     *
     * <code>FAK = 3;</code>
     */
    public static final int FAK_VALUE = 3;
    /**
     * <pre>
     * FOK
     * </pre>
     *
     * <code>FOK = 4;</code>
     */
    public static final int FOK_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PriceTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static PriceTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_PRICE_TYPE;
        case 1: return LIMIT;
        case 2: return MARKET;
        case 3: return FAK;
        case 4: return FOK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PriceTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PriceTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PriceTypeEnum>() {
            public PriceTypeEnum findValueByNumber(int number) {
              return PriceTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(8);
    }

    private static final PriceTypeEnum[] VALUES = values();

    public static PriceTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PriceTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.PriceTypeEnum)
  }

  /**
   * <pre>
   * 网关类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.GatewayTypeEnum}
   */
  public enum GatewayTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 交易和行情数据
     * </pre>
     *
     * <code>TRADE_AND_MARKET_DATA = 0;</code>
     */
    TRADE_AND_MARKET_DATA(0),
    /**
     * <pre>
     * 行情数据
     * </pre>
     *
     * <code>MARKET_DATA = 1;</code>
     */
    MARKET_DATA(1),
    /**
     * <pre>
     * 交易
     * </pre>
     *
     * <code>TRADE_ONLY = 2;</code>
     */
    TRADE_ONLY(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 交易和行情数据
     * </pre>
     *
     * <code>TRADE_AND_MARKET_DATA = 0;</code>
     */
    public static final int TRADE_AND_MARKET_DATA_VALUE = 0;
    /**
     * <pre>
     * 行情数据
     * </pre>
     *
     * <code>MARKET_DATA = 1;</code>
     */
    public static final int MARKET_DATA_VALUE = 1;
    /**
     * <pre>
     * 交易
     * </pre>
     *
     * <code>TRADE_ONLY = 2;</code>
     */
    public static final int TRADE_ONLY_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GatewayTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static GatewayTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return TRADE_AND_MARKET_DATA;
        case 1: return MARKET_DATA;
        case 2: return TRADE_ONLY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GatewayTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GatewayTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GatewayTypeEnum>() {
            public GatewayTypeEnum findValueByNumber(int number) {
              return GatewayTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(9);
    }

    private static final GatewayTypeEnum[] VALUES = values();

    public static GatewayTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GatewayTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.GatewayTypeEnum)
  }

  /**
   * <pre>
   * 网关适配器类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.GatewayAdapterTypeEnum}
   */
  public enum GatewayAdapterTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * CTP
     * </pre>
     *
     * <code>CTP = 0;</code>
     */
    CTP(0),
    /**
     * <pre>
     * IB
     * </pre>
     *
     * <code>IB = 1;</code>
     */
    IB(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * CTP
     * </pre>
     *
     * <code>CTP = 0;</code>
     */
    public static final int CTP_VALUE = 0;
    /**
     * <pre>
     * IB
     * </pre>
     *
     * <code>IB = 1;</code>
     */
    public static final int IB_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GatewayAdapterTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static GatewayAdapterTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return CTP;
        case 1: return IB;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GatewayAdapterTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GatewayAdapterTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GatewayAdapterTypeEnum>() {
            public GatewayAdapterTypeEnum findValueByNumber(int number) {
              return GatewayAdapterTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(10);
    }

    private static final GatewayAdapterTypeEnum[] VALUES = values();

    public static GatewayAdapterTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GatewayAdapterTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.GatewayAdapterTypeEnum)
  }

  /**
   * <pre>
   * 连接状态
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ConnectStatusEnum}
   */
  public enum ConnectStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 已经断开
     * </pre>
     *
     * <code>DISCONNECTED = 0;</code>
     */
    DISCONNECTED(0),
    /**
     * <pre>
     * 已经连接
     * </pre>
     *
     * <code>CONNECTED = 1;</code>
     */
    CONNECTED(1),
    /**
     * <pre>
     * 断开中
     * </pre>
     *
     * <code>DISCONNECTING = 2;</code>
     */
    DISCONNECTING(2),
    /**
     * <pre>
     * 连接中
     * </pre>
     *
     * <code>CONNECTING = 3;</code>
     */
    CONNECTING(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 已经断开
     * </pre>
     *
     * <code>DISCONNECTED = 0;</code>
     */
    public static final int DISCONNECTED_VALUE = 0;
    /**
     * <pre>
     * 已经连接
     * </pre>
     *
     * <code>CONNECTED = 1;</code>
     */
    public static final int CONNECTED_VALUE = 1;
    /**
     * <pre>
     * 断开中
     * </pre>
     *
     * <code>DISCONNECTING = 2;</code>
     */
    public static final int DISCONNECTING_VALUE = 2;
    /**
     * <pre>
     * 连接中
     * </pre>
     *
     * <code>CONNECTING = 3;</code>
     */
    public static final int CONNECTING_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConnectStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    public static ConnectStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return DISCONNECTED;
        case 1: return CONNECTED;
        case 2: return DISCONNECTING;
        case 3: return CONNECTING;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConnectStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConnectStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConnectStatusEnum>() {
            public ConnectStatusEnum findValueByNumber(int number) {
              return ConnectStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(11);
    }

    private static final ConnectStatusEnum[] VALUES = values();

    public static ConnectStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConnectStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ConnectStatusEnum)
  }

  /**
   * <pre>
   * 定单状态
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderStatusEnum}
   */
  public enum OrderStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_ORDER_STATUS = 0;</code>
     */
    UNKNOWN_ORDER_STATUS(0),
    /**
     * <pre>
     * 未成交
     * </pre>
     *
     * <code>NOT_TRADED = 1;</code>
     */
    NOT_TRADED(1),
    /**
     * <pre>
     * 部分成交
     * </pre>
     *
     * <code>PART_TRADED = 2;</code>
     */
    PART_TRADED(2),
    /**
     * <pre>
     * 全部成交
     * </pre>
     *
     * <code>ALL_TRADED = 3;</code>
     */
    ALL_TRADED(3),
    /**
     * <pre>
     * 已撤销
     * </pre>
     *
     * <code>CANCELLED = 4;</code>
     */
    CANCELLED(4),
    /**
     * <pre>
     * 拒单
     * </pre>
     *
     * <code>REJECTED = 5;</code>
     */
    REJECTED(5),
    /**
     * <pre>
     * 提交中
     * </pre>
     *
     * <code>SUBMITTING = 6;</code>
     */
    SUBMITTING(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_ORDER_STATUS = 0;</code>
     */
    public static final int UNKNOWN_ORDER_STATUS_VALUE = 0;
    /**
     * <pre>
     * 未成交
     * </pre>
     *
     * <code>NOT_TRADED = 1;</code>
     */
    public static final int NOT_TRADED_VALUE = 1;
    /**
     * <pre>
     * 部分成交
     * </pre>
     *
     * <code>PART_TRADED = 2;</code>
     */
    public static final int PART_TRADED_VALUE = 2;
    /**
     * <pre>
     * 全部成交
     * </pre>
     *
     * <code>ALL_TRADED = 3;</code>
     */
    public static final int ALL_TRADED_VALUE = 3;
    /**
     * <pre>
     * 已撤销
     * </pre>
     *
     * <code>CANCELLED = 4;</code>
     */
    public static final int CANCELLED_VALUE = 4;
    /**
     * <pre>
     * 拒单
     * </pre>
     *
     * <code>REJECTED = 5;</code>
     */
    public static final int REJECTED_VALUE = 5;
    /**
     * <pre>
     * 提交中
     * </pre>
     *
     * <code>SUBMITTING = 6;</code>
     */
    public static final int SUBMITTING_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    public static OrderStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_ORDER_STATUS;
        case 1: return NOT_TRADED;
        case 2: return PART_TRADED;
        case 3: return ALL_TRADED;
        case 4: return CANCELLED;
        case 5: return REJECTED;
        case 6: return SUBMITTING;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>() {
            public OrderStatusEnum findValueByNumber(int number) {
              return OrderStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(12);
    }

    private static final OrderStatusEnum[] VALUES = values();

    public static OrderStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderStatusEnum)
  }

  /**
   * <pre>
   * 时效
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.TimeConditionTypeEnum}
   */
  public enum TimeConditionTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_TIME_CONDITION_TYPE = 0;</code>
     */
    UNKNOWN_TIME_CONDITION_TYPE(0),
    /**
     * <pre>
     * 撤销前有效
     * </pre>
     *
     * <code>GTC = 1;</code>
     */
    GTC(1),
    /**
     * <pre>
     * 当日有效
     * </pre>
     *
     * <code>GFD = 2;</code>
     */
    GFD(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_TIME_CONDITION_TYPE = 0;</code>
     */
    public static final int UNKNOWN_TIME_CONDITION_TYPE_VALUE = 0;
    /**
     * <pre>
     * 撤销前有效
     * </pre>
     *
     * <code>GTC = 1;</code>
     */
    public static final int GTC_VALUE = 1;
    /**
     * <pre>
     * 当日有效
     * </pre>
     *
     * <code>GFD = 2;</code>
     */
    public static final int GFD_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimeConditionTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static TimeConditionTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_TIME_CONDITION_TYPE;
        case 1: return GTC;
        case 2: return GFD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimeConditionTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TimeConditionTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TimeConditionTypeEnum>() {
            public TimeConditionTypeEnum findValueByNumber(int number) {
              return TimeConditionTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(13);
    }

    private static final TimeConditionTypeEnum[] VALUES = values();

    public static TimeConditionTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimeConditionTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.TimeConditionTypeEnum)
  }

  /**
   * <pre>
   * 通用状态
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.CommonStatusEnum}
   */
  public enum CommonStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 成功
     * </pre>
     *
     * <code>SUCCESS = 0;</code>
     */
    SUCCESS(0),
    /**
     * <pre>
     * 信息
     * </pre>
     *
     * <code>INFO = 1;</code>
     */
    INFO(1),
    /**
     * <pre>
     * 警告
     * </pre>
     *
     * <code>WARN = 2;</code>
     */
    WARN(2),
    /**
     * <pre>
     * 错误
     * </pre>
     *
     * <code>ERROR = 3;</code>
     */
    ERROR(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 成功
     * </pre>
     *
     * <code>SUCCESS = 0;</code>
     */
    public static final int SUCCESS_VALUE = 0;
    /**
     * <pre>
     * 信息
     * </pre>
     *
     * <code>INFO = 1;</code>
     */
    public static final int INFO_VALUE = 1;
    /**
     * <pre>
     * 警告
     * </pre>
     *
     * <code>WARN = 2;</code>
     */
    public static final int WARN_VALUE = 2;
    /**
     * <pre>
     * 错误
     * </pre>
     *
     * <code>ERROR = 3;</code>
     */
    public static final int ERROR_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CommonStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    public static CommonStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return SUCCESS;
        case 1: return INFO;
        case 2: return WARN;
        case 3: return ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CommonStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CommonStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CommonStatusEnum>() {
            public CommonStatusEnum findValueByNumber(int number) {
              return CommonStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(14);
    }

    private static final CommonStatusEnum[] VALUES = values();

    public static CommonStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CommonStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.CommonStatusEnum)
  }

  /**
   * Protobuf enum {@code xyz.redtorch.pb.LogLevelEnum}
   */
  public enum LogLevelEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ALL_LOG_LEVEL = 0;</code>
     */
    ALL_LOG_LEVEL(0),
    /**
     * <code>ERROR_LOG_LEVEL = 40000;</code>
     */
    ERROR_LOG_LEVEL(40000),
    /**
     * <code>WARN_LOG_LEVEL = 30000;</code>
     */
    WARN_LOG_LEVEL(30000),
    /**
     * <code>INFO_LOG_LEVEL = 20000;</code>
     */
    INFO_LOG_LEVEL(20000),
    /**
     * <code>DEBUG_LOG_LEVEL = 10000;</code>
     */
    DEBUG_LOG_LEVEL(10000),
    /**
     * <code>TRACE_LOG_LEVEL = 5000;</code>
     */
    TRACE_LOG_LEVEL(5000),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ALL_LOG_LEVEL = 0;</code>
     */
    public static final int ALL_LOG_LEVEL_VALUE = 0;
    /**
     * <code>ERROR_LOG_LEVEL = 40000;</code>
     */
    public static final int ERROR_LOG_LEVEL_VALUE = 40000;
    /**
     * <code>WARN_LOG_LEVEL = 30000;</code>
     */
    public static final int WARN_LOG_LEVEL_VALUE = 30000;
    /**
     * <code>INFO_LOG_LEVEL = 20000;</code>
     */
    public static final int INFO_LOG_LEVEL_VALUE = 20000;
    /**
     * <code>DEBUG_LOG_LEVEL = 10000;</code>
     */
    public static final int DEBUG_LOG_LEVEL_VALUE = 10000;
    /**
     * <code>TRACE_LOG_LEVEL = 5000;</code>
     */
    public static final int TRACE_LOG_LEVEL_VALUE = 5000;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LogLevelEnum valueOf(int value) {
      return forNumber(value);
    }

    public static LogLevelEnum forNumber(int value) {
      switch (value) {
        case 0: return ALL_LOG_LEVEL;
        case 40000: return ERROR_LOG_LEVEL;
        case 30000: return WARN_LOG_LEVEL;
        case 20000: return INFO_LOG_LEVEL;
        case 10000: return DEBUG_LOG_LEVEL;
        case 5000: return TRACE_LOG_LEVEL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LogLevelEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        LogLevelEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LogLevelEnum>() {
            public LogLevelEnum findValueByNumber(int number) {
              return LogLevelEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(15);
    }

    private static final LogLevelEnum[] VALUES = values();

    public static LogLevelEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private LogLevelEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.LogLevelEnum)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037xyz/redtorch/pb/core_enum.proto\022\017xyz.r" +
      "edtorch.pb*\251\002\n\014CurrencyEnum\022\024\n\020UNKNOWN_C" +
      "URRENCY\020\000\022\007\n\003USD\020\001\022\007\n\003CNY\020\002\022\007\n\003CNH\020\003\022\007\n\003" +
      "HKD\020\004\022\007\n\003JPY\020\005\022\007\n\003EUR\020\006\022\007\n\003GBP\020\007\022\007\n\003DEM\020" +
      "\010\022\007\n\003CHF\020\t\022\007\n\003FRF\020\n\022\007\n\003CAD\020\013\022\007\n\003AUD\020\014\022\007\n" +
      "\003ATS\020\r\022\007\n\003FIM\020\016\022\007\n\003BEF\020\017\022\007\n\003THB\020\020\022\007\n\003IEP" +
      "\020\021\022\007\n\003ITL\020\022\022\007\n\003LUF\020\023\022\007\n\003NLG\020\024\022\007\n\003PTE\020\025\022\007" +
      "\n\003ESP\020\026\022\007\n\003IDR\020\027\022\007\n\003MYR\020\030\022\007\n\003NZD\020\031\022\007\n\003PH" +
      "P\020\032\022\007\n\003SUR\020\033\022\007\n\003SGD\020\034\022\007\n\003KRW\020\035*\226\002\n\014Excha" +
      "ngeEnum\022\024\n\020UNKNOWN_EXCHANGE\020\000\022\007\n\003SSE\020\001\022\010" +
      "\n\004SZSE\020\002\022\t\n\005CFFEX\020\003\022\010\n\004SHFE\020\004\022\010\n\004CZCE\020\005\022" +
      "\007\n\003DCE\020\006\022\007\n\003SGE\020\007\022\007\n\003INE\020\010\022\010\n\004SEHK\020\t\022\010\n\004" +
      "HKFE\020\n\022\007\n\003SGX\020\013\022\t\n\005NYBOT\020\014\022\t\n\005NYMEX\020\r\022\t\n" +
      "\005COMEX\020\016\022\007\n\003CME\020\017\022\007\n\003CFE\020\020\022\n\n\006GLOBEX\020\021\022\007" +
      "\n\003ICE\020\022\022\007\n\003IPE\020\023\022\007\n\003LME\020\024\022\014\n\010IDEALPRO\020\025\022" +
      "\t\n\005OANDA\020\026\022\010\n\004FXCM\020\027\022\t\n\005SMART\020\030*\334\001\n\017Prod" +
      "uctTypeEnum\022\030\n\024UNKNOWN_PRODUCT_TYPE\020\000\022\n\n" +
      "\006EQUITY\020\001\022\013\n\007FUTURES\020\002\022\n\n\006OPTION\020\003\022\t\n\005IN" +
      "DEX\020\004\022\017\n\013COMBINATION\020\005\022\010\n\004BOND\020\006\022\t\n\005FORE" +
      "X\020\007\022\010\n\004SPOT\020\010\022\t\n\005DEFER\020\t\022\007\n\003ETF\020\n\022\013\n\007WAR" +
      "RANT\020\013\022\n\n\006SPREAD\020\014\022\010\n\004FUND\020\r\022\007\n\003EFP\020\016\022\017\n" +
      "\013SPOT_OPTION\020\017*<\n\016OptionTypeEnum\022\027\n\023UNKN" +
      "OWN_OPTION_TYPE\020\000\022\010\n\004CALL\020\001\022\007\n\003PUT\020\002*D\n\r" +
      "DirectionEnum\022\025\n\021UNKNOWN_DIRECTION\020\000\022\010\n\004" +
      "LONG\020\001\022\t\n\005SHORT\020\002\022\007\n\003NET\020\003*l\n\nOffsetEnum" +
      "\022\022\n\016UNKNOWN_OFFSET\020\000\022\017\n\013OFFSET_NONE\020\001\022\010\n" +
      "\004OPEN\020\002\022\t\n\005CLOSE\020\003\022\017\n\013CLOSE_TODAY\020\004\022\023\n\017C" +
      "LOSE_YESTERDAY\020\005*\266\001\n\rOrderTypeEnum\022\026\n\022UN" +
      "KNOWN_ORDER_TYPE\020\000\022\016\n\nSELL_ORDER\020\001\022\r\n\tBU" +
      "Y_ORDER\020\002\022\017\n\013SHORT_ORDER\020\003\022\017\n\013COVER_ORDE" +
      "R\020\004\022\021\n\rSELL_TD_ORDER\020\005\022\021\n\rSELL_YD_ORDER\020" +
      "\006\022\022\n\016COVER_TD_ORDER\020\007\022\022\n\016COVER_YD_ORDER\020" +
      "\010*7\n\026StrategyEngineTypeEnum\022\014\n\010TREADING\020" +
      "\000\022\017\n\013BACKTESTING\020\001*P\n\rPriceTypeEnum\022\026\n\022U" +
      "NKNOWN_PRICE_TYPE\020\000\022\t\n\005LIMIT\020\001\022\n\n\006MARKET" +
      "\020\002\022\007\n\003FAK\020\003\022\007\n\003FOK\020\004*M\n\017GatewayTypeEnum\022" +
      "\031\n\025TRADE_AND_MARKET_DATA\020\000\022\017\n\013MARKET_DAT" +
      "A\020\001\022\016\n\nTRADE_ONLY\020\002*)\n\026GatewayAdapterTyp" +
      "eEnum\022\007\n\003CTP\020\000\022\006\n\002IB\020\001*W\n\021ConnectStatusE" +
      "num\022\020\n\014DISCONNECTED\020\000\022\r\n\tCONNECTED\020\001\022\021\n\r" +
      "DISCONNECTING\020\002\022\016\n\nCONNECTING\020\003*\211\001\n\017Orde" +
      "rStatusEnum\022\030\n\024UNKNOWN_ORDER_STATUS\020\000\022\016\n" +
      "\nNOT_TRADED\020\001\022\017\n\013PART_TRADED\020\002\022\016\n\nALL_TR" +
      "ADED\020\003\022\r\n\tCANCELLED\020\004\022\014\n\010REJECTED\020\005\022\016\n\nS" +
      "UBMITTING\020\006*J\n\025TimeConditionTypeEnum\022\037\n\033" +
      "UNKNOWN_TIME_CONDITION_TYPE\020\000\022\007\n\003GTC\020\001\022\007" +
      "\n\003GFD\020\002*>\n\020CommonStatusEnum\022\013\n\007SUCCESS\020\000" +
      "\022\010\n\004INFO\020\001\022\010\n\004WARN\020\002\022\t\n\005ERROR\020\003*\220\001\n\014LogL" +
      "evelEnum\022\021\n\rALL_LOG_LEVEL\020\000\022\025\n\017ERROR_LOG" +
      "_LEVEL\020\300\270\002\022\024\n\016WARN_LOG_LEVEL\020\260\352\001\022\024\n\016INFO" +
      "_LOG_LEVEL\020\240\234\001\022\024\n\017DEBUG_LOG_LEVEL\020\220N\022\024\n\017" +
      "TRACE_LOG_LEVEL\020\210\'b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
